#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
This script generates noise images with a mosaic pattern and then creates inverted polarity versions of those images. 
The noise images are generated by creating blocks of random brightness values, which are based on a Gaussian distribution. 
After generating the noise images, their polarity is inverted, and the average brightness is adjusted to maintain consistency.

Steps in the script:
1. Generate noise images with a specified block size and random brightness values.
2. Save the generated noise images to a directory.
3. Invert the polarity of each noise image while maintaining the average brightness at 128.
4. Save the inverted polarity noise images to the same directory.

Requirements:
- Pillow (PIL) library for image creation and manipulation
- Numpy for array-based operations
"""

# import libraries
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import random
import os

# set image size
image_width, image_height = 1000, 500
# background color is medium gray
bg_color = (128, 128, 128) 

# calculate the pixel size for each mosaic block (assuming 1 degree = 50 pixels)ï¼‰
degree_to_pixel = 50
block_size_in_degrees = 1.2  
# convert to pixels
block_size = int(block_size_in_degrees * degree_to_pixel) 
# function to generate noise
def generate_noise(image_width, image_height, block_size=10):
    noise_image = np.zeros((image_height, image_width, 3), dtype=np.uint8)
    for y in range(0, image_height, block_size):
        for x in range(0, image_width, block_size):
            # randomly generate the brightness of the noise block (Gaussian distribution, mean=128, std=50)
            brightness = random.gauss(128, 50)
            # limit brightness range between 0 and 255
            brightness = np.clip(brightness, 0, 255) 
            noise_image[y:y+block_size, x:x+block_size] = [brightness, brightness, brightness]
    return noise_image

# function to generate and save noise images
def save_noise_images(num_images=5): 
    if not os.path.exists("noise"):
        os.makedirs("noise")

    for i in range(num_images):
        noise_image = generate_noise(image_width, image_height, block_size)
        noise_img = Image.fromarray(noise_image)
        file_path = f"noise/noise_{i+1}.png" 
        noise_img.save(file_path)

# polarity inversion function, maintaining average brightness at 128
def invert_polarity(image):
    noise_array = np.array(image)
    # get the current average brightness of the image
    current_mean = np.mean(noise_array)
    # invert the polarity of each pixel
    inverted_array = 255 - noise_array
    # calculate the adjustment factor after inversion to maintain the brightness
    inverted_mean = np.mean(inverted_array)
    adjustment = 128 - inverted_mean
    inverted_array = np.clip(inverted_array + adjustment, 0, 255)
    
    inverted_img = Image.fromarray(inverted_array.astype(np.uint8))
    return inverted_img

# generate and save 5 noise images
def save_inverted_images():
    for i in range(5):  
        noise_img = Image.open(f"noise/noise_{i+1}.png")
        inverted_img = invert_polarity(noise_img)
        inverted_img.save(f"noise/inverted_noise_{i+1}.png")  

save_noise_images(num_images=5)
save_inverted_images()
